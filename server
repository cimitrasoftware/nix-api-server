#!/bin/bash
###########################################
# import                                  #
# Author: Tay Kratzer - tay@cimitra.com   #
# Version: 1.0                            #
# Modify date: 4/21/2020                  #
###########################################
# Cimitra Server Control Tool

declare -i SHOW_HELP=0

# See if a CIMITRA_SERVER_DIRECTORY is defined in an environment variable
if [[ -z "${CIMITRA_SERVER_DIRECTORY}" ]] 
then
declare CIMITRA_SERVER_DIRECTORY="/var/opt/cimitra/server"
fi


while getopts "hs:" opt; do
  case ${opt} in
    s) CIMITRA_SERVER_DIRECTORY="$OPTARG"
	CIMITRA_SERVER_DIRECTORY_SET=1
	;;
    h) SHOW_HELP="1"
      ;;
  esac
done



declare CIMITRA_YAML_FILE="${CIMITRA_SERVER_DIRECTORY}/docker-compose.yml"

function CALL_ERROR_EXIT()
{
ERROR_MESSAGE="$1"
ERROR_MESSAGE="  ${ERROR_MESSAGE}  "
echo ""
if [ -t 0 ]
then
echo "$(tput setaf 1)ERROR:$(tput setab 7)${ERROR_MESSAGE}$(tput sgr 0)"
else
echo "ERROR:${ERROR_MESSAGE}"
fi
echo ""
exit 1
}

function CALL_EXIT()
{
EXIT_CODE="$1"
exit ${EXIT_CODE}
}

function CALL_INFO()
{
INFO_MESSAGE="$1"
INFO_MESSAGE="  ${INFO_MESSAGE}  "
echo ""
if [ -t 0 ]
then
echo "$(tput setaf 2)$(tput setab 4)INFO:$(tput setaf 4)$(tput setab 7)${INFO_MESSAGE}$(tput sgr 0)"
else
echo "INFO:${INFO_MESSAGE}"
fi
echo ""
}

function CALL_COMMAND()
{
INFO_MESSAGE="$1"
INFO_MESSAGE="  ${INFO_MESSAGE}  "
echo ""
if [ -t 0 ]
then
echo "$(tput setaf 2)$(tput setab 4)COMMAND:$(tput setaf 4)$(tput setab 7)${INFO_MESSAGE}$(tput sgr 0)"
else
echo "COMMAND:${INFO_MESSAGE}"
fi
echo ""
}

function SHOW_HELP()
{
echo ""
echo $"Usage: cimitra server {start|stop|restart|status|upgrade|help}"
echo ""
}

if [ $SHOW_HELP -eq 1 ]
then
SHOW_HELP ${EXIT_CODE}
exit 0
fi

function DISCOVER_SERVER_DIRECTORY()
{

declare -i CIMITRA_SERVER_DIRECTORY_EXISTS=`test -d ${CIMITRA_SERVER_DIRECTORY} ; echo $?` 

if [ $CIMITRA_SERVER_DIRECTORY_EXISTS -ne 0 ]
then
CALL_ERROR_EXIT "The Cimitra Server directory ${CIMITRA_SERVER_DIRECTORY} does not exist"
fi

declare -i CIMITRA_YAML_FILE_EXISTS=`test -f ${CIMITRA_YAML_FILE} ; echo $?` 

if [ $CIMITRA_YAML_FILE_EXISTS -ne 0 ]
then
CALL_ERROR_EXIT "The Cimitra Server YAML File ${CIMITRA_YAML_FILE} does not exist"
fi

cd ${CIMITRA_SERVER_DIRECTORY} 2> /dev/null

CURRENT_DIR=`pwd` 

if [ $CURRENT_DIR == ${CIMITRA_SERVER_DIRECTORY} ]
then
:
else
CALL_ERROR_EXIT "Cannot Access Directory: ${CIMITRA_SERVER_DIRECTORY}"
fi

declare -i CIMITRA_YAML_FILE_VALID=`grep -ic "cimitra" ${CIMITRA_YAML_FILE}` 

if [ $CIMITRA_YAML_FILE_VALID -eq 0 ]
then
CALL_ERROR_EXIT "The Cimitra Server YAML File ${CIMITRA_YAML_FILE} is invalid"
fi

}

function DISCOVER_DOCKER_EXISTENCE()
{

{
docker 1> /dev/null 2> /dev/null
} 1> /dev/null 2> /dev/null

declare -i DOCKER_EXISTS=`echo $?`

if [ $DOCKER_EXISTS -ne 0 ]
then
CALL_ERROR_EXIT "Docker does not exist"
fi

{
declare -i DOCKER_COMPOSE_EXISTS=`docker-compose ; echo $?`
} 1> /dev/null 2> /dev/null

if [ $DOCKER_COMPOSE_EXISTS -gt 1 ]
then
CALL_ERROR_EXIT "Docker Compose does not exist"
fi

}

function start()
{
CALL_COMMAND "cd ${CIMITRA_SERVER_DIRECTORY}"
cd ${CIMITRA_SERVER_DIRECTORY} 
CALL_COMMAND "docker-compose up -d"
docker-compose up -d
CALL_INFO "Finished Loading The Cimitra Docker Containers"
}

function stop()
{
CALL_COMMAND "cd ${CIMITRA_SERVER_DIRECTORY}"
cd ${CIMITRA_SERVER_DIRECTORY} 
CALL_COMMAND "docker-compose down"
docker-compose down
CALL_INFO "Finished Unloading The Cimitra Docker Containers"
}

function status()
{
CALL_COMMAND "docker images -a"
docker images -a

CALL_COMMAND "docker ps"
docker ps

declare -i WEB_RUNNING=0
declare -i SERVER_RUNNING=0
declare -i DB_RUNNING=0

declare -i CIMITRA_WEB_IMAGE_EXISTS=`docker ps | grep -i "cimitra/web" | grep -ic up`

if [ $CIMITRA_WEB_IMAGE_EXISTS -gt 0 ]
then
WEB_RUNNING="1"
CALL_INFO "Cimitra/Web Client Docker Image Running"
else
CALL_INFO "Cimitra/Web Client Docker Image NOT Running"
fi

declare -i CIMITRA_SERVER_IMAGE_EXISTS=`docker ps | grep -i "cimitra/server" | grep -ic up`

if [ $CIMITRA_SERVER_IMAGE_EXISTS -gt 0 ]
then
SERVER_RUNNING="1"
CALL_INFO "Cimitra/Server Docker Image Running"
else
CALL_INFO "Cimitra/Server Docker Image NOT Running"
fi

declare -i CIMITRA_MONGO_IMAGE_EXISTS=`docker ps | grep -i "mongo" | grep -ic up`

if [ $CIMITRA_MONGO_IMAGE_EXISTS -gt 0 ]
then
DB_RUNNING=1
CALL_INFO "Cimitra/Mongo Database Docker Image Running"
else
CALL_INFO "Cimitra/Mongo Database Docker Image NOT Running"
fi

declare -i ALL_RUNNING=0

let ALL_RUNNING=WEB_RUNNING+SERVER_RUNNING+DB_RUNNING

if [ $ALL_RUNNING -eq 3 ]
then
CALL_EXIT "0"
else
CALL_EXIT "1"
fi

}

function REMOVE_CIMITRA_DOCKER_COMPONENTS()
{

declare -i CIMITRA_WEB_IMAGE_EXISTS=`docker images -a | grep "cimitra/web" | wc -m`

if [ $CIMITRA_WEB_IMAGE_EXISTS -gt 2 ]
then
CIMITRA_WEB_IMAGE=`docker images -a | grep "cimitra/web" | head -1 | awk '{printf $3}'`
CALL_INFO "Removing Cimitra Web Client Docker Image"
CALL_COMMAND "docker rmi ${CIMITRA_WEB_IMAGE}"
docker rmi ${CIMITRA_WEB_IMAGE}
fi

declare -i CIMITRA_SERVER_IMAGE_EXISTS=`docker images -a | grep "cimitra/server" | wc -m`

if [ $CIMITRA_SERVER_IMAGE_EXISTS -gt 2 ]
then
CIMITRA_SERVER_IMAGE=`docker images -a | grep "cimitra/server" | head -1 | awk '{printf $3}'`
CALL_INFO "Removing Cimitra Server Docker Image"
CALL_COMMAND "docker rmi ${CIMITRA_SERVER_IMAGE}"
docker rmi ${CIMITRA_SERVER_IMAGE}
fi

declare -i CIMITRA_MONGO_IMAGE_EXISTS=`docker images -a | grep "mongo" | grep "latest" | wc -m`


if [ $CIMITRA_MONGO_IMAGE_EXISTS -gt 2 ]
then
CIMITRA_MONGO_IMAGE=`docker images -a | grep "mongo" | grep "latest" | head -1 | awk '{printf $3}'`
CALL_INFO "Removing Cimitra Server Docker Image"
CALL_COMMAND "docker rmi ${CIMITRA_MONGO_IMAGE}"
docker rmi ${CIMITRA_MONGO_IMAGE}
fi

CALL_INFO "Finished Removing The Cimitra Docker Containers"
}

function INITIATE()
{
DISCOVER_SERVER_DIRECTORY
DISCOVER_DOCKER_EXISTENCE
}

case "$1" in
    start)
	INITIATE
	start 
	;;
    stop)
	INITIATE
	stop
	;;
    restart)
	INITIATE
	stop
	start
	;;
    status)
	INITIATE
	status
	;;
    upgrade)
	INITIATE
	stop
	REMOVE_CIMITRA_DOCKER_COMPONENTS
	start 
	;;
    backup)
	# backup "$2"
	:
	;;
    help)
	SHOW_HELP
	;;
    *)
	SHOW_HELP
	;;
esac
